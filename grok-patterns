LOGID (?:[()a-zA-Z0-9:\d-]*)
OPID (?:[()a-zA-Z0-9@:\d-]*)
THREADNAME (?:[ ()a-zA-Z0-9\d\/-]+)
THREADCONTEXT (?:[ a-zA-Z0-9/.:,-]*)
ALPHAMUMERIC (?:[a-zA-Z0-9]*)
VM_START_MESSAGE (%{SPACE} Successfully transitioned to start state for VM\[User\|i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM\]%{SPACE}reservation id %{SPACE}=%{SPACE}(?<reservationid>(?:[a-zA-Z0-9:\d-]+)))
VM_DEPLOY_MESSAGE (%{SPACE}Trying to deploy VM, vm has dcId: %{SPACE}(?<dc_id>(?:[0-9a-zA-Z]+))%{SPACE}and podId:%{SPACE}(?<pod_id>(?:[0-9a-zA-Z]+)))
ASYNC_JOB_RESULT_MESSAGE (%{SPACE}Complete async job-(?:[0-9]+), jobStatus:%{SPACE}(?<jobStatus>(?:[A-Z]+)),%{SPACE}resultCode:%{SPACE}%{NUMBER:resultCode},%{SPACE}result: org.apache.cloudstack.api.response.UserVmResponse/virtualmachine/%{GREEDYDATA:api-response})
VM_DESTROY_MESSAGE (%{SPACE} Destroying vm VM\[User\|i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM\])
VM_STOP_MESSAGE (%{SPACE} VM\[User\|i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM\] is stopped on the host.  Proceeding to release resource held.)
VM_RELEASE_RESOURCES_MESSAGE (%{SPACE}%{GREEDYDATA} VM\[User\|i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM\])
VM_REBOOT_MESSAGE (%{SPACE}Rebooting vm i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM)
VM_STATE_MESSAGE ( The VM i-(?<userid>(?:[0-9]+))-(?<vm_id>(?:[0-9]+))-VM is in %{WORD:vm_state} state(?:[.]*))
API_MESSAGE (%{SPACE}===(?<api_command_status>(?:[START|END]+))===%{SPACE}%{IP:api_source_ip}%{SPACE}--%{SPACE}(?<api_method>(?:[a-zA-Z]+))%{SPACE}command=%{DATA:api_command}&%{GREEDYDATA})
API_REQUEST_MESSAGE (%{SPACE}===(?<api_command_status>(?:[START|END]+))===%{SPACE}%{IP:api_source_ip}%{SPACE}--%{SPACE}(?<api_method>(?:[a-zA-Z]+))%{SPACE}apiKey=%{GREEDYDATA:api_key}&command=%{DATA:api_command}&%{GREEDYDATA})
ASYNC_JOB_DETAILS ({id:%{SPACE}%{INT:id}, userId:%{SPACE}%{INT:userid}, accountId:%{SPACE}%{INT:account_id}, instanceType: %{DATA:instance_type}, instanceId:%{SPACE}%{ALPHAMUMERIC:instance_id}, cmd:%{SPACE}%{JAVACLASS:command}, cmdInfo: %{GREEDYDATA:command_info}})
UNKNOWN_PARAMETER_MESSAGE (%{SPACE} Received unknown parameters for command %{DATA:unknown_parameter_command}. Unknown parameters : %{GREEDYDATA:unknown_parameter})
ASYNC_JOB_MESSAGE (%{SPACE}Executing AsyncJobVO%{SPACE}%{ASYNC_JOB_DETAILS})
ASYNC_JOB_SUBMIT_MESSAGE (%{SPACE}submit async job-%{INT:job_id}, details: AsyncJobVO%{SPACE}%{ASYNC_JOB_DETAILS})
COMMAND_EXEC_DONE_MESSAGE (%{SPACE}Done executing%{SPACE}(?<command>[A-Za-z0-9.]*) for job-%{INT:job_id})
VM_JOB_RUN_MESSAGE (%{SPACE}Run VM work job:%{SPACE}%{JAVACLASS:vm_work_job}%{SPACE}for VM%{SPACE}%{NUMBER:vm_id},%{SPACE}job origin:%{SPACE}%{NUMBER})
VM_JOB_EXEC_MESSAGE (%{SPACE}Execute VM work job:%{SPACE}%{JAVACLASS:vm_work_job}{\"cleanup\":(?<cleanup>(?:[true|false|null]+)),\"userId\":%{NUMBER:vm_user_id},\"accountId\":%{NUMBER:vm_account_id},\"vmId\":%{NUMBER:vm_id},\"handlerName\":%{QS:handler}})
VM_JOB_DONE_MESSAGE (%{SPACE}Done executing VM work job:%{SPACE}%{JAVACLASS:vm_work_job}{\"cleanup\":(?<cleanup>(?:[true|false|null]+)),\"userId\":%{NUMBER:vm_user_id},\"accountId\":%{NUMBER:vm_account_id},\"vmId\":%{NUMBER:vm_id},\"handlerName\":%{QS:handler}})
VM_RUN_DONE_MESSAGE (%{SPACE}Done with run of VM work job:%{SPACE}%{JAVACLASS:vm_work_job} for VM %{NUMBER:vm_id}, job origin: %{NUMBER})
VM_STATE_TRANSITION_MESSAGE (%{SPACE}VM state transitted from :%{WORD} to %{WORD} with event: (?<event_name>(?:[a-zA-Z]*))vm's original host id:%{SPACE}(?<hostid>(?:[0-9a-zA-Z]+))%{SPACE}new host id:%{SPACE}(?<new_hostid>(?:[0-9a-zA-Z]+))%{SPACE}host id before state transition:%{SPACE}(?<hostid_before_transition>(?:[0-9a-zA-Z]+)))
VM_CPU_UTILIZATION_MESSAGE (%{SPACE}Vm cpu utilization %{BASE16FLOAT:cpu_utilization})
VM_STATE_REPORT_MESSAGE1 (%{SPACE}Process host VM state report from ping process. host: %{NUMBER:host})
VM_STATE_REPORT_MESSAGE2 (%{SPACE}Process VM state report. host: %{NUMBER:host}, number of records in report: %{NUMBER:no_of_records})
VM_STATE_REPORT_MESSAGE3 (%{SPACE}VM power state does not change, skip DB writing. vm id: %{NUMBER:vm_id})
VM_STATE_REPORT_MESSAGE4 (%{SPACE}Done with process of VM state report. host: %{NUMBER:host})
VM_STATE_REPORT_MESSAGE5 (%{SPACE}VM state report. host: %{NUMBER:host}, vm id: %{NUMBER:vm_id}, power state: %{WORD:power_state})
ENTITY_LAUNCH_MESSAGE (%{SPACE}Zone %{NUMBER:zone} is ready to launch%{SPACE}%{GREEDYDATA})
RESOURCE_COUNT_DISCREPANCY_MESSAGE (%{SPACE}Discrepency in the resource count \(original count=%{INT:original_resource_count} correct count = %{INT:correct_resource_count}\)%{GREEDYDATA})
NTWRK_GROUP_MESSAGE (%{SPACE}Disassociated %{INT} network groups  from uservm %{INT:vm_id})
FIREWALL_MESSAGE1 (%{SPACE}No firewall rules are found for vm id=%{INT:vm_id})
FIREWALL_MESSAGE2 (%{SPACE}Firewall rules are removed successfully as a part of vm id=%{INT:vm_id}%{GREEDYDATA})
PORT_FORWARDING_MESSAGE1 (%{SPACE}No port forwarding rules are found for vm id=%{INT:vm_id}%{GREEDYDATA})
PORT_FORWARDING_MESSAGE2 (%{SPACE}Port forwarding rules are removed successfully as a part of vm id=%{INT:vm_id}%{GREEDYDATA})
DATASTORE_SUMMARY_INFO (%{SPACE}Datastore summary info, storageId: (?<ds_storage_id>(?:[a-zA-Z0-9-]*)), localPath: %{DATA:ds_local_path}, poolType: %{DATA:ds_pool_type}, capacity: %{INT:ds_capacity}, free: %{INT:ds_free}, used: %{INT:ds_used})
STORAGE_POOL_MESSAGE1 (%{SPACE}Found storage pool %{DATA:storagepool_name} of type %{GREEDYDATA})
STORAGE_POOL_MESSAGE2 (%{SPACE}Found storage pool %{DATA:storagepool_name} of type %{DATA} with overprovisioning factor %{INT:overprovisioning_factor})
CAPACITY_CHECKER_MESSAGE1 (%{SPACE}Total over provisioned capacity of the pool %{DATA:storagepool_name} id: %{INT:id} is %{INT:overprovisioned_capacity})
CAPACITY_CHECKER_MESSAGE2 (%{SPACE}Total over provisioned capacity calculated is %{GREEDYDATA:overprovisioned_capacity})
CAPACITY_CHECKER_MESSAGE3 (%{SPACE}Successfully set Capacity - %{INT:storage_capacity} for capacity type - %{INT:capacity_type} , DataCenterId - %{INT:data_center_id}, HostOrPoolId - %{INT:host_or_pool_id}, PodId %{INT:pod_id})
CAPACITY_CHECKER_MESSAGE4 (%{SPACE}No need to calibrate cpu capacity, host:%{INT:host} usedCpu: %{INT:usedCpu} reservedCpu: %{INT:reservedCpu})
CAPACITY_CHECKER_MESSAGE5 (%{SPACE}No need to calibrate memory capacity, host:%{INT:host} usedMem: %{INT:usedMem} reservedMem: %{INT:reservedMem})
CLEANUP_WARNING (%{SPACE}Failed to cleanup rules for host %{IP:host_ip})
SEQUENCE_PROCESSING_MESSAGE1 (%{SPACE}(?:[ a-zA-Z\d-]+): (?:[Processing|Received]*)(?<sequence>(?:[ a-zA-Z\d-]+)):%{SPACE}{ Cmd , %{GREEDYDATA:command}})
SEQUENCE_PROCESSING_MESSAGE2 (%{SPACE}(?<sequence>(?:[ a-zA-Z\d-]+)): (?:[Processing|Received]*):%{SPACE}{ Ans: , %{GREEDYDATA:answer}})
SEQUENCE_PROCESSING_MESSAGE3 (%{SPACE}(?:[ a-zA-Z\d-]+): (?:[Sending|Processing|Received]*)(?<sequence>(?:[ a-zA-Z\d-]+)):%{SPACE}{ (?:[Cmd|Ans:]*) , %{GREEDYDATA}})
ALERT_MESSAGE (%{SPACE}alertType:: %{ALPHAMUMERIC:alert_type} // dataCenterId:: %{ALPHAMUMERIC:data_centre_id} // podId:: %{ALPHAMUMERIC:pod_id} // clusterId:: %{ALPHAMUMERIC:cluster_id} // message:: %{GREEDYDATA})
DATA_TILL_SQUARE_BRACKET ([^]]*)
DATA_TILL_PIPE ([^|]*)
DATA_TILL_COLON ([^:]*)
